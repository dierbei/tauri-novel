#!/bin/bash
set -e

# ÈÖçÁΩÆÈ°π
DEFAULT_COLOR="#ffffff"    # ÈªòËÆ§Áä∂ÊÄÅÊ†èÈ¢úËâ≤
ENABLE_AUTO_DETECTION=true # ÂêØÁî®Ëá™Âä®È¢úËâ≤Ê£ÄÊµã
DETECTION_INTERVAL=100     # Ê£ÄÊµãÈó¥Èöî(ÊØ´Áßí)

echo "üöÄ Ê≠£Âú®ÈÖçÁΩÆÊô∫ËÉΩ Android Áä∂ÊÄÅÊ†èËá™ÈÄÇÂ∫î..."
echo "ü§ñ Ëá™Âä®Ê£ÄÊµã: $ENABLE_AUTO_DETECTION"

# Êü•Êâæ MainActivity.kt
echo "üîç Ê≠£Âú®Êü•Êâæ MainActivity.kt ..."
MAIN_ACTIVITY_DIRS=(
    "src-tauri/gen/android/app/src/main/java"
    "src-tauri/gen/android/app/src/main/kotlin"
)

FILE=""
for dir in "${MAIN_ACTIVITY_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        FILE=$(find "$dir" -name MainActivity.kt 2>/dev/null | head -1)
        if [ -n "$FILE" ]; then
            break
        fi
    fi
done

if [ -z "$FILE" ]; then
    echo "‚ùå MainActivity.kt Êú™ÊâæÂà∞"
    exit 1
fi

echo "‚úÖ ÊâæÂà∞ MainActivity.kt: $FILE"

# Â§á‰ªΩ
BACKUP_FILE="${FILE}.bak.$(date +%Y%m%d_%H%M%S)"
cp "$FILE" "$BACKUP_FILE"
echo "üíæ Â∑≤Â§á‰ªΩ: $BACKUP_FILE"

# ËØªÂèñÂåÖÂêç
PACKAGE_LINE=$(grep '^package ' "$FILE")
echo "üì¶ ÂåÖÂêç: $PACKAGE_LINE"

# ÂàõÂª∫Êô∫ËÉΩ MainActivity.kt
cat > "$FILE" <<'EOF'
PACKAGE_PLACEHOLDER

import android.animation.ValueAnimator
import android.graphics.Bitmap
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.View
import android.webkit.WebView
import androidx.core.graphics.ColorUtils
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import kotlin.math.abs
import kotlin.math.sqrt

class MainActivity : TauriActivity() {
    private var currentStatusBarColor = Color.WHITE
    private var isLightStatusBar = true
    private val handler = Handler(Looper.getMainLooper())
    private var colorDetectionRunnable: Runnable? = null
    private val colorAnimator = ValueAnimator()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        setupWindow()
        startColorDetection()
    }

    private fun setupWindow() {
        // ÂêØÁî®ËæπÂà∞ËæπÊòæÁ§∫
        WindowCompat.setDecorFitsSystemWindows(window, false)
        
        // ÂàùÂßãÁä∂ÊÄÅÊ†èËÆæÁΩÆ
        updateStatusBar(Color.WHITE, true)
        
        // Â§ÑÁêÜÁ™óÂè£ÊèíÂÖ•
        val rootView = findViewById<View>(android.R.id.content)
        ViewCompat.setOnApplyWindowInsetsListener(rootView) { view, insets ->
            val statusBarInsets = insets.getInsets(WindowInsetsCompat.Type.statusBars())
            view.setPadding(0, statusBarInsets.top, 0, 0)
            insets
        }
    }

    private fun startColorDetection() {
        if (!ENABLE_AUTO_DETECTION_PLACEHOLDER) return
        
        colorDetectionRunnable = object : Runnable {
            override fun run() {
                detectAndUpdateStatusBarColor()
                handler.postDelayed(this, DETECTION_INTERVAL_PLACEHOLDER.toLong())
            }
        }
        
        // Âª∂ËøüÂêØÂä®ÔºåÁ≠âÂæÖ WebView Âä†ËΩΩ
        handler.postDelayed(colorDetectionRunnable!!, 1000)
    }

    private fun detectAndUpdateStatusBarColor() {
        val webView = findWebView(findViewById(android.R.id.content))
        webView?.let { wv ->
            captureWebViewTopColor(wv) { color ->
                if (color != null && shouldUpdateColor(color)) {
                    val isLight = isColorLight(color)
                    animateStatusBarColor(color, !isLight)
                }
            }
        }
    }

    private fun findWebView(view: View): WebView? {
        return when (view) {
            is WebView -> view
            is android.view.ViewGroup -> {
                for (i in 0 until view.childCount) {
                    findWebView(view.getChildAt(i))?.let { return it }
                }
                null
            }
            else -> null
        }
    }

    private fun captureWebViewTopColor(webView: WebView, callback: (Int?) -> Unit) {
        try {
            // ÊâßË°å JavaScript Ëé∑ÂèñÈ°µÈù¢È°∂ÈÉ®È¢úËâ≤
            webView.evaluateJavascript("""
                (function() {
                    // Ëé∑ÂèñÈ°µÈù¢È°∂ÈÉ®ÂÖÉÁ¥†ÁöÑËÉåÊôØËâ≤
                    var topElements = document.elementsFromPoint(window.innerWidth / 2, 50);
                    for (var element of topElements) {
                        var style = window.getComputedStyle(element);
                        var bgColor = style.backgroundColor;
                        
                        if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {
                            return bgColor;
                        }
                    }
                    
                    // Â§áÈÄâÊñπÊ°àÔºöËé∑Âèñ body ËÉåÊôØËâ≤
                    return window.getComputedStyle(document.body).backgroundColor;
                })();
            """) { result ->
                try {
                    val colorString = result?.replace("\"", "")
                    val color = parseColorString(colorString)
                    callback(color)
                } catch (e: Exception) {
                    callback(null)
                }
            }
        } catch (e: Exception) {
            callback(null)
        }
    }

    private fun parseColorString(colorString: String?): Int? {
        if (colorString.isNullOrEmpty() || colorString == "null") return null
        
        return try {
            when {
                colorString.startsWith("rgb(") -> {
                    val rgb = colorString.substring(4, colorString.length - 1)
                        .split(",")
                        .map { it.trim().toInt() }
                    Color.rgb(rgb[0], rgb[1], rgb[2])
                }
                colorString.startsWith("rgba(") -> {
                    val rgba = colorString.substring(5, colorString.length - 1)
                        .split(",")
                        .map { it.trim() }
                    val r = rgba[0].toInt()
                    val g = rgba[1].toInt()
                    val b = rgba[2].toInt()
                    val a = (rgba[3].toFloat() * 255).toInt()
                    Color.argb(a, r, g, b)
                }
                colorString.startsWith("#") -> {
                    Color.parseColor(colorString)
                }
                else -> null
            }
        } catch (e: Exception) {
            null
        }
    }

    private fun shouldUpdateColor(newColor: Int): Boolean {
        // ËÆ°ÁÆóÈ¢úËâ≤Â∑ÆÂºÇÔºåÈÅøÂÖçÈ¢ëÁπÅÊõ¥Êñ∞
        val currentRed = Color.red(currentStatusBarColor)
        val currentGreen = Color.green(currentStatusBarColor)
        val currentBlue = Color.blue(currentStatusBarColor)
        
        val newRed = Color.red(newColor)
        val newGreen = Color.green(newColor)
        val newBlue = Color.blue(newColor)
        
        val distance = sqrt(
            ((newRed - currentRed) * (newRed - currentRed) +
             (newGreen - currentGreen) * (newGreen - currentGreen) +
             (newBlue - currentBlue) * (newBlue - currentBlue)).toDouble()
        )
        
        return distance > 30 // È¢úËâ≤Â∑ÆÂºÇÈòàÂÄº
    }

    private fun isColorLight(color: Int): Boolean {
        return ColorUtils.calculateLuminance(color) > 0.5
    }

    private fun animateStatusBarColor(targetColor: Int, lightContent: Boolean) {
        // ÂèñÊ∂à‰πãÂâçÁöÑÂä®Áîª
        colorAnimator.cancel()
        
        colorAnimator.setIntValues(currentStatusBarColor, targetColor)
        colorAnimator.setEvaluator { fraction, startValue, endValue ->
            ColorUtils.blendARGB(startValue as Int, endValue as Int, fraction)
        }
        colorAnimator.duration = 300 // 300ms Âä®Áîª
        
        colorAnimator.addUpdateListener { animator ->
            val animatedColor = animator.animatedValue as Int
            updateStatusBar(animatedColor, lightContent)
        }
        
        colorAnimator.start()
        
        currentStatusBarColor = targetColor
        isLightStatusBar = lightContent
    }

    private fun updateStatusBar(color: Int, lightContent: Boolean) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            window.statusBarColor = color
        }
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val decorView = window.decorView
            var flags = decorView.systemUiVisibility
            
            flags = if (lightContent) {
                flags and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv()
            } else {
                flags or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
            }
            
            decorView.systemUiVisibility = flags
        }
    }

    override fun onResume() {
        super.onResume()
        // ÊÅ¢Â§çÈ¢úËâ≤Ê£ÄÊµã
        colorDetectionRunnable?.let {
            handler.postDelayed(it, DETECTION_INTERVAL_PLACEHOLDER.toLong())
        }
    }

    override fun onPause() {
        super.onPause()
        // ÊöÇÂÅúÈ¢úËâ≤Ê£ÄÊµã‰ª•ËäÇÁúÅÊÄßËÉΩ
        colorDetectionRunnable?.let {
            handler.removeCallbacks(it)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        handler.removeCallbacksAndMessages(null)
        colorAnimator.cancel()
    }
}
EOF

# ÊõøÊç¢Âç†‰ΩçÁ¨¶
sed -i "s/PACKAGE_PLACEHOLDER/$PACKAGE_LINE/" "$FILE"
sed -i "s/ENABLE_AUTO_DETECTION_PLACEHOLDER/$ENABLE_AUTO_DETECTION/" "$FILE"
sed -i "s/DETECTION_INTERVAL_PLACEHOLDER/$DETECTION_INTERVAL/g" "$FILE"

echo "‚úÖ MainActivity.kt Â∑≤Êõ¥Êñ∞‰∏∫Êô∫ËÉΩÁâàÊú¨"